# src/scripts/load_bioconductor_tools.py

"""
Bioconductor Tools Integration Script - Fixed Version
Loads ALL 2300+ Bioconductor packages into your existing ChromaDB.
Follows the exact plan specified by the user.

Usage:
    python src/scripts/load_bioconductor_tools.py

This will:
1. Follow user's exact plan to scrape Bioconductor packages
2. Load them into your existing ChromaDB using SemanticSearchStore
3. Test search quality with Bioconductor-specific queries
4. Generate a comprehensive report

Author: Nitanshu (ChromaDB & RAG Pipeline)
"""

import asyncio
import sys
import os
from pathlib import Path
import time

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

async def main():
    """Main function to load Bioconductor tools."""
    
    print("üß¨ Bioconductor Tools Integration for ChromaDB")
    print("=" * 55)
    print("Following user's exact plan:")
    print("1. Use official PACKAGES file for accurate package discovery")
    print("2. Visit each package page to extract detailed info")
    print("3. Load all packages into ChromaDB")
    print("This will take 5-10 minutes to complete (2300+ packages).\n")
    
    try:
        # Check internet connectivity first
        print("üîç Checking internet connectivity...")
        try:
            import requests
            test_response = requests.get("https://bioconductor.org", timeout=10)
            if test_response.status_code == 200:
                print(f"‚úÖ Bioconductor website accessible!")
            else:
                print(f"‚ö†Ô∏è  Bioconductor website returned status {test_response.status_code}")
        except Exception as e:
            print(f"‚ùå Internet connectivity issue: {e}")
            print("Please check your internet connection and try again.")
            return False
        
        # Import required modules - FIXED: Use correct class name
        try:
            from bioconductor_tools_collector import FixedBioconductorCollector
            print("‚úÖ Bioconductor collector imported successfully")
        except ImportError as e:
            print(f"‚ùå Failed to import Bioconductor collector: {e}")
            print("Make sure bioconductor_tools_collector.py is in the scripts folder")
            return False
        
        try:
            from src.db.chroma_store import SemanticSearchStore
            print("‚úÖ ChromaDB store imported successfully")
        except ImportError as e:
            print(f"‚ùå Failed to import ChromaDB store: {e}")
            print("Make sure your ChromaDB dependencies are installed")
            return False
        
        # Start data collection
        start_time = time.time()
        
        print("\nüìä Starting Bioconductor package discovery...")
        print("üïê Following FIXED method:")
        print("   Step 1: Fetching official PACKAGES file from Bioconductor...")
        print("   Step 2: Extracting all package names (reliable approach)...")
        print("   Step 3: Visiting individual package pages...")
        print("   Step 4: Extracting version, description, author, maintainer...")
        print("   Step 5: Processing all packages...")
        print("\n‚è±Ô∏è  This may take 5-10 minutes due to respectful rate limiting...")
        
        collector = FixedBioconductorCollector()  # FIXED: Use correct class name
        bioconductor_tools = await collector.collect_and_save()
        
        if not bioconductor_tools:
            print("‚ùå No Bioconductor packages found!")
            print("üîç Debugging information:")
            print("   - Check if bioconductor.org is accessible")
            print("   - Verify the PACKAGES file is available")
            print("   - Try running the collector standalone for more details")
            return False
        
        collection_time = time.time() - start_time
        print(f"‚úÖ Discovered {len(bioconductor_tools)} Bioconductor packages in {collection_time:.1f}s")
        
        # Initialize ChromaDB store
        print("\nüíæ Initializing ChromaDB store...")
        try:
            store = SemanticSearchStore()
            print("‚úÖ ChromaDB store initialized successfully")
        except Exception as e:
            print(f"‚ùå Failed to initialize ChromaDB store: {e}")
            return False
        
        # Check existing data
        try:
            existing_count = store.collection.count()
            print(f"üìä Existing tools in database: {existing_count}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not check existing data: {e}")
            existing_count = 0
        
        # Add all Bioconductor tools
        print("üîÑ Adding Bioconductor packages to ChromaDB...")
        integration_start = time.time()
        
        try:
            success = await store.add_tools(bioconductor_tools)
        except Exception as e:
            print(f"‚ùå Error during ChromaDB integration: {e}")
            return False
        
        integration_time = time.time() - integration_start
        
        if success:
            try:
                new_count = store.collection.count()
                added_count = new_count - existing_count
            except:
                added_count = len(bioconductor_tools)
                new_count = existing_count + added_count
            
            print(f"‚úÖ Successfully added {added_count} new packages!")
            print(f"‚è±Ô∏è  Integration completed in {integration_time:.1f} seconds")
            print(f"üìä Total tools in database: {new_count}")
            print(f"üöÄ Packages per second: {len(bioconductor_tools) / integration_time:.1f}")
            
            # Test search quality
            await test_bioconductor_search(store)
            
            # Show success summary
            show_success_summary(bioconductor_tools, collection_time, integration_time)
            
            return True
        else:
            print("‚ùå Failed to integrate packages into ChromaDB")
            return False
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Process interrupted by user")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_bioconductor_search(store):
    """Test search quality with Bioconductor-specific queries."""
    print("\nüß™ Testing search quality with Bioconductor packages...")
    
    test_queries = [
        ("DESeq2 differential expression", "RNA-seq analysis"),
        ("limma microarray analysis", "Statistical analysis"),  
        ("Biostrings sequence manipulation", "Sequence tools"),
        ("ggplot2 visualization", "Plotting tools"),
        ("GenomicRanges genomic intervals", "Genomics infrastructure"),
        ("edgeR differential expression", "RNA-seq analysis"),
        ("ComplexHeatmap visualization", "Heatmap tools"),
        ("ChIPseeker peak annotation", "ChIP-seq analysis"),
        ("clusterProfiler enrichment", "Pathway analysis"),
        ("GSVA gene set analysis", "Gene set tools")
    ]
    
    excellent_count = 0
    total_results = 0
    
    for query, description in test_queries:
        try:
            results = await store.semantic_search(query, n_results=3)
            total_results += len(results)
            
            if results and len(results) >= 1:
                # Check if results are Bioconductor-related
                bioc_results = [r for r in results if 'bioconductor' in r.get('source', '').lower()]
                top_score = results[0]['relevance_score']
                
                if len(bioc_results) >= 1 and top_score > 0.3:
                    status = "‚úÖ"
                    excellent_count += 1
                elif len(results) >= 2:
                    status = "‚úîÔ∏è "
                else:
                    status = "‚ö†Ô∏è "
            else:
                status = "‚ùå"
            
            print(f"  {status} '{query}' ‚Üí {len(results)} results")
            if results:
                top = results[0]
                print(f"      Top: {top['name']} (Score: {top['relevance_score']:.2f})")
        except Exception as e:
            print(f"  ‚ùå '{query}' ‚Üí Error: {e}")
    
    quality_pct = (excellent_count / len(test_queries)) * 100
    print(f"\nüìà Search Quality: {excellent_count}/{len(test_queries)} excellent ({quality_pct:.0f}%)")
    print(f"üìä Total results found: {total_results}")

def show_success_summary(tools, collection_time, integration_time):
    """Show final success summary."""
    total_time = collection_time + integration_time
    
    print(f"\nüéâ Bioconductor integration completed successfully!")
    print(f"üìä Summary:")
    print(f"   ‚Ä¢ Bioconductor packages collected: {len(tools)}")
    print(f"   ‚Ä¢ Collection time: {collection_time:.1f} seconds ({collection_time/60:.1f} minutes)")
    print(f"   ‚Ä¢ Integration time: {integration_time:.1f} seconds") 
    print(f"   ‚Ä¢ Total time: {total_time:.1f} seconds ({total_time/60:.1f} minutes)")
    print(f"   ‚Ä¢ Performance: {len(tools) / total_time:.1f} packages/second")
    
    # Count categories
    categories = {}
    for tool in tools:
        cat = tool.get('category', 'Unknown')
        categories[cat] = categories.get(cat, 0) + 1
    
    print(f"\nüè∑Ô∏è  Categories discovered: {len(categories)}")
    top_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)[:8]
    for cat, count in top_categories:
        print(f"   ‚Ä¢ {cat}: {count} packages")
    
    # Show examples of popular packages that might be found
    popular_patterns = ['DESeq2', 'limma', 'edgeR', 'Biostrings', 'GenomicRanges', 'ggplot2', 'dplyr']
    found_popular = []
    for tool in tools:
        tool_name = tool['name']
        if any(pattern.lower() in tool_name.lower() for pattern in popular_patterns):
            found_popular.append(tool_name)
    
    if found_popular:
        print(f"\nüåü Popular packages found: {', '.join(found_popular[:8])}")
    
    # Show sample packages
    print(f"\nüì¶ Sample packages:")
    for i, tool in enumerate(tools[:5]):
        print(f"   {i+1}. {tool['name']}: {tool['description'][:50]}...")
    
    print(f"\nüéØ Next Steps:")
    print("1. Test with your agent: Results now include all Bioconductor packages")
    print("2. Search for R packages: Try 'DESeq2', 'limma', 'Biostrings'")
    print("3. Run performance tests: python src/scripts/comprehensive_test.py") 
    print("4. Check detailed report: data/bioconductor_collection/")
    print("\nüöÄ Your ChromaDB now contains the complete Bioconductor ecosystem!")
    print("üí° You can search for both Python (Biopython) and R (Bioconductor) tools!")

def check_prerequisites():
    """Check if all required dependencies are available."""
    missing_deps = []
    
    # Check core dependencies
    dependencies = [
        ("requests", "requests"),
        ("beautifulsoup4", "bs4"),
        ("chromadb", "chromadb"),
        ("langchain-community", "langchain_community")
    ]
    
    for dep_name, import_name in dependencies:
        try:
            __import__(import_name)
        except ImportError:
            missing_deps.append(dep_name)
    
    if missing_deps:
        print("‚ùå Missing dependencies:")
        for dep in missing_deps:
            print(f"  - {dep}")
        print("\nInstall missing dependencies with:")
        print(f"  pip install {' '.join(missing_deps)}")
        return False
    
    return True

def check_file_structure():
    """Check if required files are in the correct locations."""
    script_dir = Path(__file__).parent
    
    required_files = [
        ("bioconductor_tools_collector.py", "The Bioconductor package collector"),
        ("../db/chroma_store.py", "ChromaDB store implementation")
    ]
    
    missing_files = []
    
    for filename, description in required_files:
        file_path = script_dir / filename
        if not file_path.exists():
            missing_files.append((filename, description))
    
    if missing_files:
        print("‚ùå Missing required files:")
        for filename, description in missing_files:
            print(f"  - {filename}: {description}")
        return False
    
    return True

def show_integration_info():
    """Show information about the integration process."""
    print("üìã Bioconductor Integration Information:")
    print("=" * 50)
    print("üéØ FIXED Method Being Used:")
    print("   1. Fetch official PACKAGES file from Bioconductor")
    print("   2. Extract all package names (reliable & accurate)")
    print("   3. Visit each package page following your URL pattern")
    print("   4. Extract: Bioconductor version, description, author, maintainer")
    print("   5. Process all ~2340 packages")
    
    print("\nüìä Expected Data Format (like Biopython example):")
    print("   ‚Ä¢ name: Package name (e.g., 'DESeq2')")
    print("   ‚Ä¢ category: Categorized automatically")
    print("   ‚Ä¢ description: From package page")
    print("   ‚Ä¢ features: Extracted from description")
    print("   ‚Ä¢ documentation: Package HTML page URL")
    print("   ‚Ä¢ source: 'Bioconductor'")
    print("   ‚Ä¢ version: Bioconductor version (e.g., '3.21')")
    print("   ‚Ä¢ programming_language: 'R'")
    print("   ‚Ä¢ license: 'Artistic-2.0'")
    print("   ‚Ä¢ installation_guide: 'BiocManager::install(\"PackageName\")'")
    print("   ‚Ä¢ tool_type: 'package'")
    print("   ‚Ä¢ full_name: Same as name for Bioconductor")
    
    print("\n‚è±Ô∏è  Expected timeline:")
    print("   ‚Ä¢ Package discovery: 8-15 minutes (2300+ packages with rate limiting)")
    print("   ‚Ä¢ ChromaDB integration: 30-60 seconds")
    print("   ‚Ä¢ Total time: 9-16 minutes")
    
    print("\nüîÑ Rate limiting:")
    print("   ‚Ä¢ Respectful crawling: 0.1 seconds per request")
    print("   ‚Ä¢ Batch processing with 2-second delays")
    print("   ‚Ä¢ Server-friendly scraping practices")
    
    print("\n‚ú® FIXED Method Advantages:")
    print("   ‚úÖ Uses official Bioconductor PACKAGES file")
    print("   ‚úÖ Much more reliable than HTML table parsing")
    print("   ‚úÖ Gets accurate package names")
    print("   ‚úÖ Follows your exact URL pattern")
    print("   ‚úÖ Extracts author and maintainer as requested")
    
    response = input("\n‚ùì Continue with integration? (y/N): ").strip().lower()
    return response in ['y', 'yes']

if __name__ == "__main__":
    print("üîç Checking prerequisites and file structure...")
    
    if not check_prerequisites():
        print("\nüí° Install missing dependencies first:")
        print("  pip install requests beautifulsoup4 chromadb langchain-community")
        sys.exit(1)
    
    if not check_file_structure():
        print("\nüìÅ File Structure Help:")
        print("Your scripts folder should contain:")
        print("  src/scripts/")
        print("  ‚îú‚îÄ‚îÄ load_bioconductor_tools.py         # This file")
        print("  ‚îú‚îÄ‚îÄ bioconductor_tools_collector.py    # The fixed collector")
        print("  ‚îú‚îÄ‚îÄ load_biopython_tools.py            # Existing Biopython loader")
        print("  ‚îî‚îÄ‚îÄ test_chroma_setup.py               # Existing test file")
        print("\nAnd your db folder should contain:")
        print("  src/db/")
        print("  ‚îî‚îÄ‚îÄ chroma_store.py                     # ChromaDB implementation")
        sys.exit(1)
    
    print("‚úÖ All prerequisites and files found!")
    
    # Show integration information and get user confirmation
    if not show_integration_info():
        print("‚ùå Integration cancelled by user.")
        sys.exit(0)
    
    print("\nüöÄ Starting Bioconductor integration...")
    
    # Run the integration
    success = asyncio.run(main())
    
    if not success:
        print("\n‚ö†Ô∏è  Integration failed. Check the error messages above.")
        print("\nüîß Troubleshooting Tips:")
        print("1. Ensure internet connectivity to bioconductor.org")
        print("2. Check if the PACKAGES file is accessible")
        print("3. Try running bioconductor_tools_collector.py standalone")
        print("4. Check ChromaDB dependencies are properly installed")
        sys.exit(1)
    else:
        print("\nüåü SUCCESS: Bioconductor packages successfully integrated!")
        print("üéØ Using FIXED method:")
        print("   ‚úÖ Used official PACKAGES file for package discovery")
        print("   ‚úÖ Extracted packages reliably")  
        print("   ‚úÖ Visited individual package pages")
        print("   ‚úÖ Extracted version, description, author, maintainer")
        print("   ‚úÖ Added all packages to ChromaDB")
        print("\nüîç Your ChromaDB now contains both:")
        print("   ‚Ä¢ Biopython tools (Python packages)")
        print("   ‚Ä¢ Bioconductor packages (R packages)")
        print(f"   ‚Ä¢ Total: Comprehensive bioinformatics toolkit!")